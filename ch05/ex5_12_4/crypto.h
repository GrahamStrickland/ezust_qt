#ifndef CRYPTO_H
#define CRYPTO_H

// This is the interface for the ADT Crypto.

#include <cstdlib>

#include <QVector>
#include <QString>
#include <QChar>

class Crypto {
public:
    Crypto(ushort key, QString opseq, ushort charsiz = 128);
        // Constructor
        // Precondition: key = encryption key; opseq = QString 
        //  of characters 'p' and 's' for permute() and shift(),
        //  charsize = character set size;
        
    QString encrypt(const QString& str);
        // Function to encrypt the QString str.
        // Postcondition: Returned encrypted QString.

    QString decrypt(const QString& str);
        // Function to decrypt the QString str.
        // Postcondition: Returned decrypted QString.

private:
    ushort m_Key;
    QString m_OpSequence;
    ushort m_CharSetSize;
    QVector<int> m_Perm;

    QString shift(const QString& text, unsigned key);
        // Function to shift all characters in text using
        //  pseudo-random numbers generated by the seed key.
        // Postcondition: Returned encrypted QString.

    QString unshift(const QString& cryptext, unsigned key);
        // Function to unshift all encrypted characters in text
        //  using the same pseudo-random numbers as shift().
        // Postcondition: Returned original unencrpted QString.

    QString permute(const QString& text, unsigned key);
        // Function to permute the characters of text.
        // Postcondition: Returned permuted QString.

    QString unpermute(const QString& scrtext, unsigned key);
        // Function to return the permuted chararcters of a QString
        //  back to their original ordering.
        // Postcondition: Returned unpermuted QString.

    static int limitedRand(int min, int max);
        // Function to return random integer within range [min,max].
        // Postcondition: Returned pseudo-random int.

    QVector<int> randomPerm(int n, unsigned key);
        // Function to return permutation of the numbers 0...n
        // Postcondition: Returned permutation seeded with key,
        //  stored in QVector.
};
#endif // CRYPTO_H
